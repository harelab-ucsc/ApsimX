{
  "$type": "Models.Core.Simulations, Models",
  "Version": 180,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Core.Simulation, Models",
      "Descriptors": null,
      "Name": "Clay Fallow",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "1989-01-01T00:00:00",
          "End": "1989-12-31T00:00:00",
          "Name": "Clock",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "Summary",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "../../../../Examples/WeatherFiles/AU_Goondiwindi.met",
          "ExcelWorkSheetName": "",
          "Name": "Weather",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "SoilArbitrator",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.MicroClimate, Models",
          "a_interception": 0.0,
          "b_interception": 1.0,
          "c_interception": 0.0,
          "d_interception": 0.0,
          "SoilHeatFluxFraction": 0.4,
          "MinimumHeightDiffForNewLayer": 0.0,
          "NightInterceptionFraction": 0.5,
          "ReferenceHeight": 2.0,
          "Name": "MicroClimate",
          "ResourceName": "MicroClimate",
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "X": 0.0,
          "Y": 0.0,
          "Z": 0.0,
          "SW": 0.0,
          "Name": "Field",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Weather].Rain",
                "sum([Soil].SoilWater.ESW)",
                "sum([Soil].Water.Volumetric)",
                "[Soil].SoilWater.Es",
                "[Soil].SoilWater.Runoff",
                "[Soil].SoilWater.Drainage",
                "sum([Soil].NO3.kgha)",
                "sum([Soil].Nutrient.MineralisedN",
                "[SurfaceOrganicMatter].Wt",
                "[SurfaceOrganicMatter].Cover"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "GroupByVariableName": null,
              "Name": "Report",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "SurfOM": [],
              "Canopies": [],
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 1000.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 100.0,
              "Name": "SurfaceOrganicMatter",
              "ResourceName": "SurfaceOrganicMatter",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 50,
              "ASCOrder": "Vertosol",
              "ASCSubOrder": "Black",
              "SoilType": "Clay",
              "LocalName": null,
              "Site": "Kaimkillenbun",
              "NearestTown": "Kaimkillenbun, Q 4406",
              "Region": "Darling Downs and Granite Belt",
              "State": "Queensland",
              "Country": "Australia",
              "NaturalVegetation": "Open woodland with mountain coolibah",
              "ApsoilNumber": "11",
              "Latitude": -27.066,
              "Longitude": 151.413,
              "LocationAccuracy": " +/- 20m",
              "YearOfSampling": null,
              "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba",
              "Comments": "oc and ph estimated",
              "Name": "Heavy Clay",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "ParticleSizeClay": null,
                  "Rocks": null,
                  "Texture": null,
                  "BD": [
                    1.01,
                    1.04,
                    1.07,
                    1.08,
                    1.15,
                    1.23,
                    1.26
                  ],
                  "AirDry": [
                    0.11,
                    0.176,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "LL15": [
                    0.22,
                    0.22,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "DUL": [
                    0.54,
                    0.53,
                    0.52,
                    0.51,
                    0.49,
                    0.46,
                    0.44
                  ],
                  "SAT": [
                    0.59,
                    0.58,
                    0.57,
                    0.56,
                    0.54,
                    0.51,
                    0.49
                  ],
                  "KS": null,
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "RocksMetadata": null,
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": null,
                  "ParticleSizeSiltMetadata": null,
                  "ParticleSizeClayMetadata": null,
                  "Name": "Physical",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.22,
                        0.22,
                        0.28,
                        0.28,
                        0.34,
                        0.37,
                        0.36
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.02
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "WheatSoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.22,
                        0.22,
                        0.31,
                        0.31,
                        0.36,
                        0.37,
                        0.36
                      ],
                      "KL": [
                        0.07,
                        0.07,
                        0.07,
                        0.05,
                        0.05,
                        0.04,
                        0.03
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "BarleySoil",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 6.0,
                  "SummerCona": 3.5,
                  "WinterDate": "1-Apr",
                  "WinterU": 4.0,
                  "WinterCona": 2.5,
                  "DiffusConst": 40.0,
                  "DiffusSlope": 16.0,
                  "Salb": 0.12,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": "NaN",
                  "CatchmentArea": "NaN",
                  "PSIDul": -100.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "SWCON": [
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3
                  ],
                  "KLAT": null,
                  "Name": "SoilWater",
                  "ResourceName": "WaterBalance",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Water, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "InitialValues": [
                    0.487,
                    0.22,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "InitialPAWmm": 40.05,
                  "RelativeTo": "LL15",
                  "FilledFromTop": true,
                  "Name": "Water",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    0.954,
                    0.954,
                    0.962,
                    0.846,
                    0.546,
                    0.262,
                    0.2
                  ],
                  "CarbonUnits": 0,
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "FOM": [
                    347.129,
                    270.344,
                    163.972,
                    99.454,
                    60.322,
                    36.587,
                    22.191
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    999999.0,
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "PH": [
                    "NaN",
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0
                  ],
                  "PHUnits": 0,
                  "EC": null,
                  "ESP": null,
                  "CEC": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": null,
                  "Name": "Chemical",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "Temperature",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "Name": "Nutrient",
                  "ResourceName": "Nutrient",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    1800.0
                  ],
                  "InitialValues": [
                    50.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    1800.0
                  ],
                  "InitialValues": [
                    3.0
                  ],
                  "InitialValuesUnits": 1,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Solute, Models",
                  "Thickness": [
                    2000.0
                  ],
                  "InitialValues": [
                    0.0
                  ],
                  "InitialValuesUnits": 0,
                  "WaterTableConcentration": 0.0,
                  "D0": 0.0,
                  "Exco": null,
                  "FIP": null,
                  "DepthConstant": 0.0,
                  "MaxDepthSoluteAccessible": 0.0,
                  "RunoffEffectivenessAtMovingSolute": 0.0,
                  "MaxEffectiveRunoff": 0.0,
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils;",
                "using System;",
                "using System.Linq;",
                "using Models.Core;",
                "using Models.PMF;",
                "using APSIM.Shared.Utilities;",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] Clock Clock;",
                "        [Link] Irrigation Irrigation;",
                "        ",
                "        [Separator(\"A component to apply irrigation on one or more dates on every year of the simulation\")]",
                "",
                "        [Description(\"Enter the irrigation dates as dd-mmm with comma separation (any year information entered will be ignored)\")] ",
                "        public string[] IrrigateDates { get; set; }",
                "        ",
                "        [Description(\"Amount of irrigation to be applied (mm)\")] ",
                "        public double Amount { get; set; }",
                "        ",
                "        [Description(\"Depth in the soil to apply the  irrigation (mm)\")] ",
                "        public double Depth { get; set; }",
                "        ",
                "        [Description(\"Efficiency of irrigation (0-1)\")] ",
                "        public double Efficiency { get; set; }",
                "        ",
                "        [Description(\"Will the irrigation runoff?\")] ",
                "        public bool WillRunoff { get; set; }",
                "        ",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "            foreach (string ddMMM in IrrigateDates)",
                "            {",
                "                if (DateUtilities.DatesEqual(ddMMM, Clock.Today))",
                "                    Irrigation.Apply(amount: Amount, depth: Depth, efficiency: Efficiency, willRunoff: WillRunoff);",
                "            }",
                "        }",
                "    }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "IrrigateDates",
                  "Value": "01-mar"
                },
                {
                  "Key": "Amount",
                  "Value": "70000"
                },
                {
                  "Key": "Depth",
                  "Value": "0"
                },
                {
                  "Key": "Efficiency",
                  "Value": "1"
                },
                {
                  "Key": "WillRunoff",
                  "Value": "False"
                }
              ],
              "Name": "Heavy Clay1",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "CodeArray": [
                "using Models.Soils.Nutrients;",
                "using System.Linq;",
                "using System;",
                "using Models.Core;",
                "using Models.PMF;",
                "using Models.Soils;",
                "using Models.Surface;",
                "using Models.Soils.Nutrients;",
                "using Models.Utilities;",
                "using Models.Functions;",
                "using MessagePack;",
                "using System.IO;",
                "using System.Collections.Generic;",
                "",
                "using NetMQ;",
                "using NetMQ.Sockets;",
                "",
                "using APSIM.Shared.Utilities;",
                "",
                "namespace Models",
                "{",
                "    [Serializable]",
                "    public class Script : Model",
                "    {",
                "        [Link] Clock clock;",
                "        [Link] Simulation simulation;",
                "        [Link] private Summary Summary;",
                "        ",
                "        [Description(\"Identifier\")]",
                "        public string Identifier { get; set;}",
                "",
                "        [NonSerialized]",
                "        private RequestSocket connection = null;",
                "        ",
                "        private bool apply_irrigation = false;",
                "        private double irrigation_amount = 0.0;",
                "            ",
                "        [EventSubscribe(\"StartOfSimulation\")]",
                "        private void OnSimulationCommencing(object sender, EventArgs e)",
                "        {",
                "           if (Identifier == \"<undefined>\") {",
                "               Console.WriteLine(\"Need an endpoint to connect to\");",
                "               Summary.WriteMessage(this, \"Need an endpoint to connect to\", MessageType.Error);",
                "               return;",
                "           } ",
                "           Console.WriteLine(\"Identifier: \" + Identifier);",
                "           bool tcp_check = false;",
                "           tcp_check = Identifier[0] != 't';",
                "           if (tcp_check) {",
                "               Identifier = \"tcp://\" + Identifier;",
                "           }",
                "           connection = new RequestSocket(Identifier);",
                "           connection.SendFrame(\"connect\");",
                "           Console.WriteLine(\"Sent connect\");",
                "           var msg = connection.ReceiveFrameString(); ",
                "           if (msg != \"ok\") { throw new Exception(\"Expected ok\"); }",
                "        }",
                "        ",
                "        [EventSubscribe(\"EndOfDay\")]",
                "        private void OnEndOfDay(object sender, EventArgs e)",
                "        {",
                "           if (connection == null) { return; }",
                "           bool moreToDo = true;",
                "           connection.SendFrame(\"paused\");",
                "           while (moreToDo) {",
                "             var msg = connection.ReceiveMultipartMessage();",
                "             //Console.WriteLine(\"Got {0} parts, first = {1}\", msg.FrameCount, msg[0].ConvertToString()); ",
                "             if (msg.FrameCount <= 0) { continue ; }",
                "              ",
                "             var command = msg[0].ConvertToString();",
                "             if (command == \"resume\") { ",
                "                moreToDo = false;",
                "                ",
                "             } else if (command == \"do\" && msg.FrameCount >= 2) {",
                "                 onDoCommand(msg);",
                "                 connection.SendFrame(\"ok\");",
                "                 ",
                "             } else if (command == \"set\" && msg.FrameCount == 3) {",
                "                 // set an apsim variable. ",
                "                 //  arg 1 is the variable path (eg \"[Nutrient].NO3.kgha\"), ",
                "                 //  arg 2 is the packed object                ",
                "                string variableName = MessagePackSerializer.Deserialize<string>( msg[1].Buffer );",
                "                ",
                "                // See what type the apsim variable is",
                "                var myType = simulation.Get(variableName).GetType();",
                "                //Console.WriteLine(\"Got set {0}, my type is {1}\", variableName, myType);",
                "                ",
                "                object value = MessagePackSerializer.Deserialize<object>( msg[2].Buffer );",
                "                //Console.WriteLine(\"Got set {0} of incoming type {1}\", variableName, value.GetType());",
                "                if (value.GetType().IsArray != myType.IsArray) ",
                "                   throw new Exception(\"Array/scalar mismatch for \" + variableName);",
                "                    ",
                "                if (myType.IsArray) {",
                "                   Type myElementType = myType.GetElementType();",
                "                   Object[] values = (value as object[]);",
                "                   if (isNumeric(myElementType)) {",
                "                      var myValues = Array.ConvertAll(values, (e) => (double) e);",
                "                      simulation.Set(variableName, myValues);",
                "                   } else if (isInteger(myElementType)) {",
                "                      var myValues = Array.ConvertAll(values, (e) => (int) e);",
                "                      simulation.Set(variableName, myValues);",
                "                   } else if (isString(myElementType)) {",
                "                      var myValues = Array.ConvertAll(values, (e) => (string) e);",
                "                      simulation.Set(variableName, myValues);",
                "                   } else {",
                "                      throw new Exception(\"Don't know what to do setting a \" + myElementType + \" variable\");",
                "                   }",
                "                ",
                "                   //Type myElementType = myType.GetElementType();",
                "                   //var values = Array.ConvertAll((object[])value, (e) => Convert.ChangeType(e, myElementType)) as System.Array;",
                "                   //Console.WriteLine(\"Doing set {0} of type {1} ({2}) = \", variableName, ",
                "                   //                  values.GetType(), values.GetType().GetElementType(),  ",
                "                   //                  values.GetValue(0).ToString());",
                "                   //simulation.Set(variableName, values);",
                "                } else {",
                "                   simulation.Set(variableName, Convert.ChangeType(value, myType));",
                "                }",
                "                connection.SendFrame(\"ok\");",
                "                ",
                "             } else if (command == \"get\" && msg.FrameCount == 2) {",
                "                string variableName = MessagePackSerializer.Deserialize<string>( msg[1].Buffer );",
                "                object value = simulation.Get(variableName);",
                "                if (value is IFunction function)",
                "                    value = function.Value();",
                "                else if (value != null && (value.GetType().IsArray || value.GetType().IsClass))",
                "                {",
                "                   try",
                "                   {",
                "                       value = ReflectionUtilities.Clone(value);",
                "                   }",
                "                   catch (Exception err)",
                "                   {",
                "                       throw new Exception($\"Cannot report variable \\\"{variableName}\\\": Variable is a non-reportable type: \\\"{value?.GetType()?.Name}\\\".\", err);",
                "                   }",
                "                }",
                "                //Console.WriteLine(\"Got get '{0}' of type '{1}'\", variableName, value?.GetType()); ",
                "             ",
                "                byte[] bytes;",
                "                if (value != null) {",
                "                   bytes = MessagePackSerializer.Serialize(value);",
                "                } else {",
                "                   Console.WriteLine(\"Sending NA\"); ",
                "                   bytes = MessagePackSerializer.Serialize(\"NA\"); // fixme. Probably a better way to do this",
                "                } ",
                "",
                "                connection.SendFrame(bytes);",
                "             } else {",
                "                throw new Exception(\"Expected resume/get/set, not '\" + command + \"'\");",
                "             }",
                "           }",
                "        }",
                "        ",
                "        [Link] Irrigation Irrigation;",
                "",
                "        // Handle a command:",
                "        // applyIrrigation \"amount\" <double>",
                "        // terminate",
                "        ",
                "        public void onDoCommand(NetMQMessage msg) {",
                "             // msg[0] is \"do\"",
                "             var cmd = MessagePackSerializer.Deserialize<string>( msg[1].Buffer);",
                "",
                "             if (cmd == \"applyIrrigation\") {",
                "                 double irrigAmount = 0;",
                "                 for (int i = 2; i < msg.FrameCount; i += 2 ) {",
                "                    var vname = MessagePackSerializer.Deserialize<string>( msg[i].Buffer);",
                "                    if ( vname == \"amount\" ) {",
                "                        irrigAmount = MessagePackSerializer.Deserialize<double>( msg[i + 1].Buffer);",
                "                    }",
                "                 }",
                "                 if (irrigAmount > 0) {",
                "                 \tapply_irrigation = true;",
                "                 \tirrigation_amount = irrigAmount;",
                "                    ",
                "                 }",
                "             } else if (cmd == \"terminate\") {",
                "                 clock.EndDate = clock.StartDate;",
                "             }",
                "        }",
                "        ",
                "        [EventSubscribe(\"DoManagement\")]",
                "        private void OnDoManagement(object sender, EventArgs e)",
                "        {",
                "        \tif (apply_irrigation) {",
                "        \t\tIrrigation.Apply(irrigation_amount, willRunoff: true);",
                "        \t\tConsole.WriteLine(\"Field 1: Irrigated {0} \", irrigation_amount, \"mm\");",
                "        \t\tapply_irrigation = false;",
                "        \t}",
                "\t\t\t",
                "        }",
                "",
                "        [EventSubscribe(\"EndOfSimulation\")]",
                "        private void OnSimulationEnding(object sender, EventArgs e)",
                "        {",
                "            if (connection == null) { return; }",
                "            ",
                "            connection.SendFrame(\"finished\");",
                "            var msg = connection.ReceiveFrameString(); ",
                "            if (msg != \"ok\") { throw new Exception(\"Expected ok at end\"); }",
                "            connection.Close();",
                "            ",
                "            Console.WriteLine(\"Simulation Ending\");",
                "        }",
                "        static bool isNumeric(Type type) {",
                "                         switch (Type.GetTypeCode(type))",
                "                            {",
                "                                case TypeCode.Double:",
                "                                case TypeCode.Single:",
                "                                   return true;",
                "                            }",
                "                            return false;",
                "                        }",
                "                        static bool isInteger(Type type) {",
                "                         switch (Type.GetTypeCode(type))",
                "                            {",
                "                                case TypeCode.Int16:",
                "                                case TypeCode.Int32:",
                "                                case TypeCode.Int64:",
                "                                case TypeCode.UInt16:",
                "                                case TypeCode.UInt32:",
                "                                case TypeCode.UInt64:",
                "                                   return true;",
                "                            }",
                "                            return false;",
                "                        }",
                "                        static bool isString(Type type) {",
                "                         switch (Type.GetTypeCode(type))",
                "                            {",
                "                                case TypeCode.String:",
                "                                   return true;",
                "                            }",
                "                            return false;",
                "                        }       ",
                "   }",
                "}"
              ],
              "Parameters": [
                {
                  "Key": "Identifier",
                  "Value": "0.0.0.0:27746"
                }
              ],
              "Name": "Synchroniser",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": null,
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Clock.Today",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "sum(Soil.SoilWater.ESW)",
              "Position": 2,
              "Inverted": false,
              "CrossesAtZero": false,
              "LabelOnOneLine": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Graph",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": "Zone",
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Clock.Today",
              "YFieldName": "sum(Soil.Water.Volumetric)",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Water",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 2,
              "ColourArgb": -11094807,
              "FactorToVaryColours": "Zone",
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report",
              "XFieldName": "Clock.Today",
              "YFieldName": "sum(Soil.SoilWater.ESW)",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": false,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Series",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "Graph",
      "ResourceName": null,
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}